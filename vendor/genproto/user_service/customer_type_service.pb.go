// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.8
// source: customer_type_service.proto

package user_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetAllCustomerTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit int64  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Name  string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetAllCustomerTypeRequest) Reset() {
	*x = GetAllCustomerTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_type_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllCustomerTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllCustomerTypeRequest) ProtoMessage() {}

func (x *GetAllCustomerTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customer_type_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllCustomerTypeRequest.ProtoReflect.Descriptor instead.
func (*GetAllCustomerTypeRequest) Descriptor() ([]byte, []int) {
	return file_customer_type_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetAllCustomerTypeRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetAllCustomerTypeRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetAllCustomerTypeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_customer_type_service_proto protoreflect.FileDescriptor

var file_customer_type_service_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x67,
	0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x59, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x32, 0xdf, 0x02, 0x0a, 0x13, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x06,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x18,
	0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x03, 0x47, 0x65,
	0x74, 0x12, 0x18, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x65,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12,
	0x23, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x06,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x18, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x17, 0x5a, 0x15, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_customer_type_service_proto_rawDescOnce sync.Once
	file_customer_type_service_proto_rawDescData = file_customer_type_service_proto_rawDesc
)

func file_customer_type_service_proto_rawDescGZIP() []byte {
	file_customer_type_service_proto_rawDescOnce.Do(func() {
		file_customer_type_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_customer_type_service_proto_rawDescData)
	})
	return file_customer_type_service_proto_rawDescData
}

var file_customer_type_service_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_customer_type_service_proto_goTypes = []interface{}{
	(*GetAllCustomerTypeRequest)(nil),  // 0: genproto.GetAllCustomerTypeRequest
	(*CustomerType)(nil),               // 1: genproto.CustomerType
	(*CustomerTypeId)(nil),             // 2: genproto.CustomerTypeId
	(*GetAllCustomerTypeResponse)(nil), // 3: genproto.GetAllCustomerTypeResponse
	(*empty.Empty)(nil),                // 4: google.protobuf.Empty
}
var file_customer_type_service_proto_depIdxs = []int32{
	1, // 0: genproto.CustomerTypeService.Create:input_type -> genproto.CustomerType
	2, // 1: genproto.CustomerTypeService.Get:input_type -> genproto.CustomerTypeId
	0, // 2: genproto.CustomerTypeService.GetAll:input_type -> genproto.GetAllCustomerTypeRequest
	1, // 3: genproto.CustomerTypeService.Update:input_type -> genproto.CustomerType
	2, // 4: genproto.CustomerTypeService.Delete:input_type -> genproto.CustomerTypeId
	2, // 5: genproto.CustomerTypeService.Create:output_type -> genproto.CustomerTypeId
	1, // 6: genproto.CustomerTypeService.Get:output_type -> genproto.CustomerType
	3, // 7: genproto.CustomerTypeService.GetAll:output_type -> genproto.GetAllCustomerTypeResponse
	4, // 8: genproto.CustomerTypeService.Update:output_type -> google.protobuf.Empty
	4, // 9: genproto.CustomerTypeService.Delete:output_type -> google.protobuf.Empty
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_customer_type_service_proto_init() }
func file_customer_type_service_proto_init() {
	if File_customer_type_service_proto != nil {
		return
	}
	file_customer_type_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_customer_type_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllCustomerTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_customer_type_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_customer_type_service_proto_goTypes,
		DependencyIndexes: file_customer_type_service_proto_depIdxs,
		MessageInfos:      file_customer_type_service_proto_msgTypes,
	}.Build()
	File_customer_type_service_proto = out.File
	file_customer_type_service_proto_rawDesc = nil
	file_customer_type_service_proto_goTypes = nil
	file_customer_type_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CustomerTypeServiceClient is the client API for CustomerTypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomerTypeServiceClient interface {
	Create(ctx context.Context, in *CustomerType, opts ...grpc.CallOption) (*CustomerTypeId, error)
	Get(ctx context.Context, in *CustomerTypeId, opts ...grpc.CallOption) (*CustomerType, error)
	GetAll(ctx context.Context, in *GetAllCustomerTypeRequest, opts ...grpc.CallOption) (*GetAllCustomerTypeResponse, error)
	Update(ctx context.Context, in *CustomerType, opts ...grpc.CallOption) (*empty.Empty, error)
	Delete(ctx context.Context, in *CustomerTypeId, opts ...grpc.CallOption) (*empty.Empty, error)
}

type customerTypeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerTypeServiceClient(cc grpc.ClientConnInterface) CustomerTypeServiceClient {
	return &customerTypeServiceClient{cc}
}

func (c *customerTypeServiceClient) Create(ctx context.Context, in *CustomerType, opts ...grpc.CallOption) (*CustomerTypeId, error) {
	out := new(CustomerTypeId)
	err := c.cc.Invoke(ctx, "/genproto.CustomerTypeService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerTypeServiceClient) Get(ctx context.Context, in *CustomerTypeId, opts ...grpc.CallOption) (*CustomerType, error) {
	out := new(CustomerType)
	err := c.cc.Invoke(ctx, "/genproto.CustomerTypeService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerTypeServiceClient) GetAll(ctx context.Context, in *GetAllCustomerTypeRequest, opts ...grpc.CallOption) (*GetAllCustomerTypeResponse, error) {
	out := new(GetAllCustomerTypeResponse)
	err := c.cc.Invoke(ctx, "/genproto.CustomerTypeService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerTypeServiceClient) Update(ctx context.Context, in *CustomerType, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.CustomerTypeService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerTypeServiceClient) Delete(ctx context.Context, in *CustomerTypeId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.CustomerTypeService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerTypeServiceServer is the server API for CustomerTypeService service.
type CustomerTypeServiceServer interface {
	Create(context.Context, *CustomerType) (*CustomerTypeId, error)
	Get(context.Context, *CustomerTypeId) (*CustomerType, error)
	GetAll(context.Context, *GetAllCustomerTypeRequest) (*GetAllCustomerTypeResponse, error)
	Update(context.Context, *CustomerType) (*empty.Empty, error)
	Delete(context.Context, *CustomerTypeId) (*empty.Empty, error)
}

// UnimplementedCustomerTypeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCustomerTypeServiceServer struct {
}

func (*UnimplementedCustomerTypeServiceServer) Create(context.Context, *CustomerType) (*CustomerTypeId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedCustomerTypeServiceServer) Get(context.Context, *CustomerTypeId) (*CustomerType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedCustomerTypeServiceServer) GetAll(context.Context, *GetAllCustomerTypeRequest) (*GetAllCustomerTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedCustomerTypeServiceServer) Update(context.Context, *CustomerType) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedCustomerTypeServiceServer) Delete(context.Context, *CustomerTypeId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterCustomerTypeServiceServer(s *grpc.Server, srv CustomerTypeServiceServer) {
	s.RegisterService(&_CustomerTypeService_serviceDesc, srv)
}

func _CustomerTypeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerTypeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.CustomerTypeService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerTypeServiceServer).Create(ctx, req.(*CustomerType))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerTypeService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerTypeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerTypeServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.CustomerTypeService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerTypeServiceServer).Get(ctx, req.(*CustomerTypeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerTypeService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCustomerTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerTypeServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.CustomerTypeService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerTypeServiceServer).GetAll(ctx, req.(*GetAllCustomerTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerTypeService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerTypeServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.CustomerTypeService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerTypeServiceServer).Update(ctx, req.(*CustomerType))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerTypeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerTypeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerTypeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.CustomerTypeService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerTypeServiceServer).Delete(ctx, req.(*CustomerTypeId))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomerTypeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "genproto.CustomerTypeService",
	HandlerType: (*CustomerTypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CustomerTypeService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CustomerTypeService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _CustomerTypeService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CustomerTypeService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CustomerTypeService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer_type_service.proto",
}
