// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.8
// source: branch_user_service.proto

package user_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetBranchUserByPhoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone     string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	ShipperId string `protobuf:"bytes,2,opt,name=shipper_id,json=shipperId,proto3" json:"shipper_id,omitempty"`
}

func (x *GetBranchUserByPhoneRequest) Reset() {
	*x = GetBranchUserByPhoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_user_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBranchUserByPhoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBranchUserByPhoneRequest) ProtoMessage() {}

func (x *GetBranchUserByPhoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_branch_user_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBranchUserByPhoneRequest.ProtoReflect.Descriptor instead.
func (*GetBranchUserByPhoneRequest) Descriptor() ([]byte, []int) {
	return file_branch_user_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetBranchUserByPhoneRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *GetBranchUserByPhoneRequest) GetShipperId() string {
	if x != nil {
		return x.ShipperId
	}
	return ""
}

type BranchUserId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *BranchUserId) Reset() {
	*x = BranchUserId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_user_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchUserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchUserId) ProtoMessage() {}

func (x *BranchUserId) ProtoReflect() protoreflect.Message {
	mi := &file_branch_user_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchUserId.ProtoReflect.Descriptor instead.
func (*BranchUserId) Descriptor() ([]byte, []int) {
	return file_branch_user_service_proto_rawDescGZIP(), []int{1}
}

func (x *BranchUserId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpdateBranchUserFcmTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ShipperId  string `protobuf:"bytes,2,opt,name=shipper_id,json=shipperId,proto3" json:"shipper_id,omitempty"`
	FcmToken   string `protobuf:"bytes,3,opt,name=fcm_token,json=fcmToken,proto3" json:"fcm_token,omitempty"`
	PlatformId string `protobuf:"bytes,4,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty"`
}

func (x *UpdateBranchUserFcmTokenRequest) Reset() {
	*x = UpdateBranchUserFcmTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_user_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBranchUserFcmTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBranchUserFcmTokenRequest) ProtoMessage() {}

func (x *UpdateBranchUserFcmTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_branch_user_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBranchUserFcmTokenRequest.ProtoReflect.Descriptor instead.
func (*UpdateBranchUserFcmTokenRequest) Descriptor() ([]byte, []int) {
	return file_branch_user_service_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateBranchUserFcmTokenRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateBranchUserFcmTokenRequest) GetShipperId() string {
	if x != nil {
		return x.ShipperId
	}
	return ""
}

func (x *UpdateBranchUserFcmTokenRequest) GetFcmToken() string {
	if x != nil {
		return x.FcmToken
	}
	return ""
}

func (x *UpdateBranchUserFcmTokenRequest) GetPlatformId() string {
	if x != nil {
		return x.PlatformId
	}
	return ""
}

type GetAllBranchUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       uint64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit      uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	ShipperId  string `protobuf:"bytes,3,opt,name=shipper_id,json=shipperId,proto3" json:"shipper_id,omitempty"`
	UserRoleId string `protobuf:"bytes,4,opt,name=user_role_id,json=userRoleId,proto3" json:"user_role_id,omitempty"`
	Search     string `protobuf:"bytes,5,opt,name=search,proto3" json:"search,omitempty"`
	BranchId   string `protobuf:"bytes,6,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
}

func (x *GetAllBranchUsersRequest) Reset() {
	*x = GetAllBranchUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_user_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllBranchUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllBranchUsersRequest) ProtoMessage() {}

func (x *GetAllBranchUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_branch_user_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllBranchUsersRequest.ProtoReflect.Descriptor instead.
func (*GetAllBranchUsersRequest) Descriptor() ([]byte, []int) {
	return file_branch_user_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetAllBranchUsersRequest) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetAllBranchUsersRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetAllBranchUsersRequest) GetShipperId() string {
	if x != nil {
		return x.ShipperId
	}
	return ""
}

func (x *GetAllBranchUsersRequest) GetUserRoleId() string {
	if x != nil {
		return x.UserRoleId
	}
	return ""
}

func (x *GetAllBranchUsersRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetAllBranchUsersRequest) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

type GetAllBranchUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BranchUsers []*BranchUser `protobuf:"bytes,1,rep,name=branch_users,json=branchUsers,proto3" json:"branch_users,omitempty"`
	Count       uint64        `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetAllBranchUsersResponse) Reset() {
	*x = GetAllBranchUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_user_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllBranchUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllBranchUsersResponse) ProtoMessage() {}

func (x *GetAllBranchUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_branch_user_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllBranchUsersResponse.ProtoReflect.Descriptor instead.
func (*GetAllBranchUsersResponse) Descriptor() ([]byte, []int) {
	return file_branch_user_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetAllBranchUsersResponse) GetBranchUsers() []*BranchUser {
	if x != nil {
		return x.BranchUsers
	}
	return nil
}

func (x *GetAllBranchUsersResponse) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type DeleteBranchUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ShipperId string `protobuf:"bytes,2,opt,name=shipper_id,json=shipperId,proto3" json:"shipper_id,omitempty"`
}

func (x *DeleteBranchUserRequest) Reset() {
	*x = DeleteBranchUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_user_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBranchUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBranchUserRequest) ProtoMessage() {}

func (x *DeleteBranchUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_branch_user_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBranchUserRequest.ProtoReflect.Descriptor instead.
func (*DeleteBranchUserRequest) Descriptor() ([]byte, []int) {
	return file_branch_user_service_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteBranchUserRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteBranchUserRequest) GetShipperId() string {
	if x != nil {
		return x.ShipperId
	}
	return ""
}

var File_branch_user_service_proto protoreflect.FileDescriptor

var file_branch_user_service_proto_rawDesc = []byte{
	0x0a, 0x19, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x67, 0x65, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x52, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68,
	0x69, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x49, 0x64, 0x22, 0x1e, 0x0a, 0x0c, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x1f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x46, 0x63,
	0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x63, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x63, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x22, 0xba, 0x01, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x65, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x48, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x49, 0x64, 0x32, 0x8e, 0x06,
	0x0a, 0x11, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x14, 0x2e,
	0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x55,
	0x73, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x00, 0x12, 0x35, 0x0a,
	0x03, 0x47, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x14, 0x2e, 0x67,
	0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x22,
	0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x06, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x21, 0x2e,
	0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x25, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x63, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x29, 0x2e, 0x67, 0x65, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x55, 0x73, 0x65, 0x72, 0x46, 0x63, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x42,
	0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x63, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x16, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x73, 0x12, 0x1d, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x63, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x12, 0x2b, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x63,
	0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x63, 0x6d, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x17,
	0x5a, 0x15, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_branch_user_service_proto_rawDescOnce sync.Once
	file_branch_user_service_proto_rawDescData = file_branch_user_service_proto_rawDesc
)

func file_branch_user_service_proto_rawDescGZIP() []byte {
	file_branch_user_service_proto_rawDescOnce.Do(func() {
		file_branch_user_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_branch_user_service_proto_rawDescData)
	})
	return file_branch_user_service_proto_rawDescData
}

var file_branch_user_service_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_branch_user_service_proto_goTypes = []interface{}{
	(*GetBranchUserByPhoneRequest)(nil),        // 0: genproto.GetBranchUserByPhoneRequest
	(*BranchUserId)(nil),                       // 1: genproto.BranchUserId
	(*UpdateBranchUserFcmTokenRequest)(nil),    // 2: genproto.UpdateBranchUserFcmTokenRequest
	(*GetAllBranchUsersRequest)(nil),           // 3: genproto.GetAllBranchUsersRequest
	(*GetAllBranchUsersResponse)(nil),          // 4: genproto.GetAllBranchUsersResponse
	(*DeleteBranchUserRequest)(nil),            // 5: genproto.DeleteBranchUserRequest
	(*BranchUser)(nil),                         // 6: genproto.BranchUser
	(*GetAllPhonesRequest)(nil),                // 7: genproto.GetAllPhonesRequest
	(*GetAllBranchUsersFcmTokensRequest)(nil),  // 8: genproto.GetAllBranchUsersFcmTokensRequest
	(*empty.Empty)(nil),                        // 9: google.protobuf.Empty
	(*GetAllPhonesResponse)(nil),               // 10: genproto.GetAllPhonesResponse
	(*GetAllBranchUsersFcmTokensResponse)(nil), // 11: genproto.GetAllBranchUsersFcmTokensResponse
}
var file_branch_user_service_proto_depIdxs = []int32{
	6,  // 0: genproto.GetAllBranchUsersResponse.branch_users:type_name -> genproto.BranchUser
	6,  // 1: genproto.BranchUserService.Create:input_type -> genproto.BranchUser
	1,  // 2: genproto.BranchUserService.Get:input_type -> genproto.BranchUserId
	3,  // 3: genproto.BranchUserService.GetAll:input_type -> genproto.GetAllBranchUsersRequest
	6,  // 4: genproto.BranchUserService.Update:input_type -> genproto.BranchUser
	5,  // 5: genproto.BranchUserService.Delete:input_type -> genproto.DeleteBranchUserRequest
	0,  // 6: genproto.BranchUserService.GetByPhone:input_type -> genproto.GetBranchUserByPhoneRequest
	2,  // 7: genproto.BranchUserService.UpdateFcmToken:input_type -> genproto.UpdateBranchUserFcmTokenRequest
	1,  // 8: genproto.BranchUserService.DeleteFcmToken:input_type -> genproto.BranchUserId
	7,  // 9: genproto.BranchUserService.GetAllPhones:input_type -> genproto.GetAllPhonesRequest
	8,  // 10: genproto.BranchUserService.GetAllBranchUsersFcmTokens:input_type -> genproto.GetAllBranchUsersFcmTokensRequest
	1,  // 11: genproto.BranchUserService.Create:output_type -> genproto.BranchUserId
	6,  // 12: genproto.BranchUserService.Get:output_type -> genproto.BranchUser
	4,  // 13: genproto.BranchUserService.GetAll:output_type -> genproto.GetAllBranchUsersResponse
	9,  // 14: genproto.BranchUserService.Update:output_type -> google.protobuf.Empty
	9,  // 15: genproto.BranchUserService.Delete:output_type -> google.protobuf.Empty
	6,  // 16: genproto.BranchUserService.GetByPhone:output_type -> genproto.BranchUser
	9,  // 17: genproto.BranchUserService.UpdateFcmToken:output_type -> google.protobuf.Empty
	9,  // 18: genproto.BranchUserService.DeleteFcmToken:output_type -> google.protobuf.Empty
	10, // 19: genproto.BranchUserService.GetAllPhones:output_type -> genproto.GetAllPhonesResponse
	11, // 20: genproto.BranchUserService.GetAllBranchUsersFcmTokens:output_type -> genproto.GetAllBranchUsersFcmTokensResponse
	11, // [11:21] is the sub-list for method output_type
	1,  // [1:11] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_branch_user_service_proto_init() }
func file_branch_user_service_proto_init() {
	if File_branch_user_service_proto != nil {
		return
	}
	file_branch_user_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_branch_user_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBranchUserByPhoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_user_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchUserId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_user_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBranchUserFcmTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_user_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllBranchUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_user_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllBranchUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_user_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBranchUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_branch_user_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_branch_user_service_proto_goTypes,
		DependencyIndexes: file_branch_user_service_proto_depIdxs,
		MessageInfos:      file_branch_user_service_proto_msgTypes,
	}.Build()
	File_branch_user_service_proto = out.File
	file_branch_user_service_proto_rawDesc = nil
	file_branch_user_service_proto_goTypes = nil
	file_branch_user_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BranchUserServiceClient is the client API for BranchUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BranchUserServiceClient interface {
	Create(ctx context.Context, in *BranchUser, opts ...grpc.CallOption) (*BranchUserId, error)
	Get(ctx context.Context, in *BranchUserId, opts ...grpc.CallOption) (*BranchUser, error)
	GetAll(ctx context.Context, in *GetAllBranchUsersRequest, opts ...grpc.CallOption) (*GetAllBranchUsersResponse, error)
	Update(ctx context.Context, in *BranchUser, opts ...grpc.CallOption) (*empty.Empty, error)
	Delete(ctx context.Context, in *DeleteBranchUserRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetByPhone(ctx context.Context, in *GetBranchUserByPhoneRequest, opts ...grpc.CallOption) (*BranchUser, error)
	UpdateFcmToken(ctx context.Context, in *UpdateBranchUserFcmTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteFcmToken(ctx context.Context, in *BranchUserId, opts ...grpc.CallOption) (*empty.Empty, error)
	GetAllPhones(ctx context.Context, in *GetAllPhonesRequest, opts ...grpc.CallOption) (*GetAllPhonesResponse, error)
	GetAllBranchUsersFcmTokens(ctx context.Context, in *GetAllBranchUsersFcmTokensRequest, opts ...grpc.CallOption) (*GetAllBranchUsersFcmTokensResponse, error)
}

type branchUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBranchUserServiceClient(cc grpc.ClientConnInterface) BranchUserServiceClient {
	return &branchUserServiceClient{cc}
}

func (c *branchUserServiceClient) Create(ctx context.Context, in *BranchUser, opts ...grpc.CallOption) (*BranchUserId, error) {
	out := new(BranchUserId)
	err := c.cc.Invoke(ctx, "/genproto.BranchUserService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchUserServiceClient) Get(ctx context.Context, in *BranchUserId, opts ...grpc.CallOption) (*BranchUser, error) {
	out := new(BranchUser)
	err := c.cc.Invoke(ctx, "/genproto.BranchUserService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchUserServiceClient) GetAll(ctx context.Context, in *GetAllBranchUsersRequest, opts ...grpc.CallOption) (*GetAllBranchUsersResponse, error) {
	out := new(GetAllBranchUsersResponse)
	err := c.cc.Invoke(ctx, "/genproto.BranchUserService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchUserServiceClient) Update(ctx context.Context, in *BranchUser, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.BranchUserService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchUserServiceClient) Delete(ctx context.Context, in *DeleteBranchUserRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.BranchUserService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchUserServiceClient) GetByPhone(ctx context.Context, in *GetBranchUserByPhoneRequest, opts ...grpc.CallOption) (*BranchUser, error) {
	out := new(BranchUser)
	err := c.cc.Invoke(ctx, "/genproto.BranchUserService/GetByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchUserServiceClient) UpdateFcmToken(ctx context.Context, in *UpdateBranchUserFcmTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.BranchUserService/UpdateFcmToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchUserServiceClient) DeleteFcmToken(ctx context.Context, in *BranchUserId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.BranchUserService/DeleteFcmToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchUserServiceClient) GetAllPhones(ctx context.Context, in *GetAllPhonesRequest, opts ...grpc.CallOption) (*GetAllPhonesResponse, error) {
	out := new(GetAllPhonesResponse)
	err := c.cc.Invoke(ctx, "/genproto.BranchUserService/GetAllPhones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchUserServiceClient) GetAllBranchUsersFcmTokens(ctx context.Context, in *GetAllBranchUsersFcmTokensRequest, opts ...grpc.CallOption) (*GetAllBranchUsersFcmTokensResponse, error) {
	out := new(GetAllBranchUsersFcmTokensResponse)
	err := c.cc.Invoke(ctx, "/genproto.BranchUserService/GetAllBranchUsersFcmTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BranchUserServiceServer is the server API for BranchUserService service.
type BranchUserServiceServer interface {
	Create(context.Context, *BranchUser) (*BranchUserId, error)
	Get(context.Context, *BranchUserId) (*BranchUser, error)
	GetAll(context.Context, *GetAllBranchUsersRequest) (*GetAllBranchUsersResponse, error)
	Update(context.Context, *BranchUser) (*empty.Empty, error)
	Delete(context.Context, *DeleteBranchUserRequest) (*empty.Empty, error)
	GetByPhone(context.Context, *GetBranchUserByPhoneRequest) (*BranchUser, error)
	UpdateFcmToken(context.Context, *UpdateBranchUserFcmTokenRequest) (*empty.Empty, error)
	DeleteFcmToken(context.Context, *BranchUserId) (*empty.Empty, error)
	GetAllPhones(context.Context, *GetAllPhonesRequest) (*GetAllPhonesResponse, error)
	GetAllBranchUsersFcmTokens(context.Context, *GetAllBranchUsersFcmTokensRequest) (*GetAllBranchUsersFcmTokensResponse, error)
}

// UnimplementedBranchUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBranchUserServiceServer struct {
}

func (*UnimplementedBranchUserServiceServer) Create(context.Context, *BranchUser) (*BranchUserId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedBranchUserServiceServer) Get(context.Context, *BranchUserId) (*BranchUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedBranchUserServiceServer) GetAll(context.Context, *GetAllBranchUsersRequest) (*GetAllBranchUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedBranchUserServiceServer) Update(context.Context, *BranchUser) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedBranchUserServiceServer) Delete(context.Context, *DeleteBranchUserRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedBranchUserServiceServer) GetByPhone(context.Context, *GetBranchUserByPhoneRequest) (*BranchUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByPhone not implemented")
}
func (*UnimplementedBranchUserServiceServer) UpdateFcmToken(context.Context, *UpdateBranchUserFcmTokenRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFcmToken not implemented")
}
func (*UnimplementedBranchUserServiceServer) DeleteFcmToken(context.Context, *BranchUserId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFcmToken not implemented")
}
func (*UnimplementedBranchUserServiceServer) GetAllPhones(context.Context, *GetAllPhonesRequest) (*GetAllPhonesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPhones not implemented")
}
func (*UnimplementedBranchUserServiceServer) GetAllBranchUsersFcmTokens(context.Context, *GetAllBranchUsersFcmTokensRequest) (*GetAllBranchUsersFcmTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBranchUsersFcmTokens not implemented")
}

func RegisterBranchUserServiceServer(s *grpc.Server, srv BranchUserServiceServer) {
	s.RegisterService(&_BranchUserService_serviceDesc, srv)
}

func _BranchUserService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BranchUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchUserServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.BranchUserService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchUserServiceServer).Create(ctx, req.(*BranchUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchUserService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BranchUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchUserServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.BranchUserService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchUserServiceServer).Get(ctx, req.(*BranchUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchUserService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllBranchUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchUserServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.BranchUserService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchUserServiceServer).GetAll(ctx, req.(*GetAllBranchUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchUserService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BranchUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchUserServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.BranchUserService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchUserServiceServer).Update(ctx, req.(*BranchUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchUserService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBranchUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchUserServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.BranchUserService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchUserServiceServer).Delete(ctx, req.(*DeleteBranchUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchUserService_GetByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchUserByPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchUserServiceServer).GetByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.BranchUserService/GetByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchUserServiceServer).GetByPhone(ctx, req.(*GetBranchUserByPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchUserService_UpdateFcmToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBranchUserFcmTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchUserServiceServer).UpdateFcmToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.BranchUserService/UpdateFcmToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchUserServiceServer).UpdateFcmToken(ctx, req.(*UpdateBranchUserFcmTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchUserService_DeleteFcmToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BranchUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchUserServiceServer).DeleteFcmToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.BranchUserService/DeleteFcmToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchUserServiceServer).DeleteFcmToken(ctx, req.(*BranchUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchUserService_GetAllPhones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPhonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchUserServiceServer).GetAllPhones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.BranchUserService/GetAllPhones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchUserServiceServer).GetAllPhones(ctx, req.(*GetAllPhonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchUserService_GetAllBranchUsersFcmTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllBranchUsersFcmTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchUserServiceServer).GetAllBranchUsersFcmTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.BranchUserService/GetAllBranchUsersFcmTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchUserServiceServer).GetAllBranchUsersFcmTokens(ctx, req.(*GetAllBranchUsersFcmTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BranchUserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "genproto.BranchUserService",
	HandlerType: (*BranchUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BranchUserService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _BranchUserService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _BranchUserService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BranchUserService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BranchUserService_Delete_Handler,
		},
		{
			MethodName: "GetByPhone",
			Handler:    _BranchUserService_GetByPhone_Handler,
		},
		{
			MethodName: "UpdateFcmToken",
			Handler:    _BranchUserService_UpdateFcmToken_Handler,
		},
		{
			MethodName: "DeleteFcmToken",
			Handler:    _BranchUserService_DeleteFcmToken_Handler,
		},
		{
			MethodName: "GetAllPhones",
			Handler:    _BranchUserService_GetAllPhones_Handler,
		},
		{
			MethodName: "GetAllBranchUsersFcmTokens",
			Handler:    _BranchUserService_GetAllBranchUsersFcmTokens_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "branch_user_service.proto",
}
