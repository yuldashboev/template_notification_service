// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.8
// source: branch_service.proto

package user_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetByJowiIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JowiId string `protobuf:"bytes,1,opt,name=jowi_id,json=jowiId,proto3" json:"jowi_id,omitempty"`
}

func (x *GetByJowiIDRequest) Reset() {
	*x = GetByJowiIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByJowiIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByJowiIDRequest) ProtoMessage() {}

func (x *GetByJowiIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_branch_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByJowiIDRequest.ProtoReflect.Descriptor instead.
func (*GetByJowiIDRequest) Descriptor() ([]byte, []int) {
	return file_branch_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetByJowiIDRequest) GetJowiId() string {
	if x != nil {
		return x.JowiId
	}
	return ""
}

type GetByIikoIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IikoId string `protobuf:"bytes,1,opt,name=iiko_id,json=iikoId,proto3" json:"iiko_id,omitempty"`
}

func (x *GetByIikoIDRequest) Reset() {
	*x = GetByIikoIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByIikoIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByIikoIDRequest) ProtoMessage() {}

func (x *GetByIikoIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_branch_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByIikoIDRequest.ProtoReflect.Descriptor instead.
func (*GetByIikoIDRequest) Descriptor() ([]byte, []int) {
	return file_branch_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetByIikoIDRequest) GetIikoId() string {
	if x != nil {
		return x.IikoId
	}
	return ""
}

type GetBranchByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ShipperId string `protobuf:"bytes,2,opt,name=shipper_id,json=shipperId,proto3" json:"shipper_id,omitempty"`
}

func (x *GetBranchByNameRequest) Reset() {
	*x = GetBranchByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBranchByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBranchByNameRequest) ProtoMessage() {}

func (x *GetBranchByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_branch_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBranchByNameRequest.ProtoReflect.Descriptor instead.
func (*GetBranchByNameRequest) Descriptor() ([]byte, []int) {
	return file_branch_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetBranchByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetBranchByNameRequest) GetShipperId() string {
	if x != nil {
		return x.ShipperId
	}
	return ""
}

type BranchId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *BranchId) Reset() {
	*x = BranchId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchId) ProtoMessage() {}

func (x *BranchId) ProtoReflect() protoreflect.Message {
	mi := &file_branch_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchId.ProtoReflect.Descriptor instead.
func (*BranchId) Descriptor() ([]byte, []int) {
	return file_branch_service_proto_rawDescGZIP(), []int{3}
}

func (x *BranchId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetBranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch *Branch `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *GetBranchResponse) Reset() {
	*x = GetBranchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBranchResponse) ProtoMessage() {}

func (x *GetBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_branch_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBranchResponse.ProtoReflect.Descriptor instead.
func (*GetBranchResponse) Descriptor() ([]byte, []int) {
	return file_branch_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetBranchResponse) GetBranch() *Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

type GetAllBranchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      uint64   `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit     uint64   `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	ShipperId string   `protobuf:"bytes,3,opt,name=shipper_id,json=shipperId,proto3" json:"shipper_id,omitempty"`
	Iiko      bool     `protobuf:"varint,4,opt,name=iiko,proto3" json:"iiko,omitempty"`
	Jowi      bool     `protobuf:"varint,5,opt,name=jowi,proto3" json:"jowi,omitempty"`
	Search    string   `protobuf:"bytes,6,opt,name=search,proto3" json:"search,omitempty"`
	FareId    string   `protobuf:"bytes,7,opt,name=fare_id,json=fareId,proto3" json:"fare_id,omitempty"`
	BranchIds []string `protobuf:"bytes,8,rep,name=branch_ids,json=branchIds,proto3" json:"branch_ids,omitempty"`
}

func (x *GetAllBranchesRequest) Reset() {
	*x = GetAllBranchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllBranchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllBranchesRequest) ProtoMessage() {}

func (x *GetAllBranchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_branch_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllBranchesRequest.ProtoReflect.Descriptor instead.
func (*GetAllBranchesRequest) Descriptor() ([]byte, []int) {
	return file_branch_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetAllBranchesRequest) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetAllBranchesRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetAllBranchesRequest) GetShipperId() string {
	if x != nil {
		return x.ShipperId
	}
	return ""
}

func (x *GetAllBranchesRequest) GetIiko() bool {
	if x != nil {
		return x.Iiko
	}
	return false
}

func (x *GetAllBranchesRequest) GetJowi() bool {
	if x != nil {
		return x.Jowi
	}
	return false
}

func (x *GetAllBranchesRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetAllBranchesRequest) GetFareId() string {
	if x != nil {
		return x.FareId
	}
	return ""
}

func (x *GetAllBranchesRequest) GetBranchIds() []string {
	if x != nil {
		return x.BranchIds
	}
	return nil
}

type GetAllBranchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branches []*Branch `protobuf:"bytes,1,rep,name=branches,proto3" json:"branches,omitempty"`
	Count    uint64    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetAllBranchesResponse) Reset() {
	*x = GetAllBranchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllBranchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllBranchesResponse) ProtoMessage() {}

func (x *GetAllBranchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_branch_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllBranchesResponse.ProtoReflect.Descriptor instead.
func (*GetAllBranchesResponse) Descriptor() ([]byte, []int) {
	return file_branch_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetAllBranchesResponse) GetBranches() []*Branch {
	if x != nil {
		return x.Branches
	}
	return nil
}

func (x *GetAllBranchesResponse) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetNearestBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location  *Location `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	ShipperId string    `protobuf:"bytes,2,opt,name=shipper_id,json=shipperId,proto3" json:"shipper_id,omitempty"`
}

func (x *GetNearestBranchRequest) Reset() {
	*x = GetNearestBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNearestBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNearestBranchRequest) ProtoMessage() {}

func (x *GetNearestBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_branch_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNearestBranchRequest.ProtoReflect.Descriptor instead.
func (*GetNearestBranchRequest) Descriptor() ([]byte, []int) {
	return file_branch_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetNearestBranchRequest) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *GetNearestBranchRequest) GetShipperId() string {
	if x != nil {
		return x.ShipperId
	}
	return ""
}

type GetNearestBranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branches []*Branch `protobuf:"bytes,1,rep,name=branches,proto3" json:"branches,omitempty"`
}

func (x *GetNearestBranchResponse) Reset() {
	*x = GetNearestBranchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNearestBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNearestBranchResponse) ProtoMessage() {}

func (x *GetNearestBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_branch_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNearestBranchResponse.ProtoReflect.Descriptor instead.
func (*GetNearestBranchResponse) Descriptor() ([]byte, []int) {
	return file_branch_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetNearestBranchResponse) GetBranches() []*Branch {
	if x != nil {
		return x.Branches
	}
	return nil
}

type DeleteBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ShipperId string `protobuf:"bytes,2,opt,name=shipper_id,json=shipperId,proto3" json:"shipper_id,omitempty"`
}

func (x *DeleteBranchRequest) Reset() {
	*x = DeleteBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBranchRequest) ProtoMessage() {}

func (x *DeleteBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_branch_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBranchRequest.ProtoReflect.Descriptor instead.
func (*DeleteBranchRequest) Descriptor() ([]byte, []int) {
	return file_branch_service_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteBranchRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteBranchRequest) GetShipperId() string {
	if x != nil {
		return x.ShipperId
	}
	return ""
}

type GetAllShipperBranchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipperId string `protobuf:"bytes,1,opt,name=shipper_id,json=shipperId,proto3" json:"shipper_id,omitempty"`
}

func (x *GetAllShipperBranchesRequest) Reset() {
	*x = GetAllShipperBranchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllShipperBranchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllShipperBranchesRequest) ProtoMessage() {}

func (x *GetAllShipperBranchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_branch_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllShipperBranchesRequest.ProtoReflect.Descriptor instead.
func (*GetAllShipperBranchesRequest) Descriptor() ([]byte, []int) {
	return file_branch_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetAllShipperBranchesRequest) GetShipperId() string {
	if x != nil {
		return x.ShipperId
	}
	return ""
}

type GetBranchNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MenuIds []string `protobuf:"bytes,1,rep,name=menu_ids,json=menuIds,proto3" json:"menu_ids,omitempty"`
}

func (x *GetBranchNameRequest) Reset() {
	*x = GetBranchNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBranchNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBranchNameRequest) ProtoMessage() {}

func (x *GetBranchNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_branch_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBranchNameRequest.ProtoReflect.Descriptor instead.
func (*GetBranchNameRequest) Descriptor() ([]byte, []int) {
	return file_branch_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetBranchNameRequest) GetMenuIds() []string {
	if x != nil {
		return x.MenuIds
	}
	return nil
}

type GetBranchNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MenuNames []*MenuName `protobuf:"bytes,1,rep,name=menuNames,proto3" json:"menuNames,omitempty"`
}

func (x *GetBranchNameResponse) Reset() {
	*x = GetBranchNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBranchNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBranchNameResponse) ProtoMessage() {}

func (x *GetBranchNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_branch_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBranchNameResponse.ProtoReflect.Descriptor instead.
func (*GetBranchNameResponse) Descriptor() ([]byte, []int) {
	return file_branch_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetBranchNameResponse) GetMenuNames() []*MenuName {
	if x != nil {
		return x.MenuNames
	}
	return nil
}

type MenuName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MenuId     string `protobuf:"bytes,1,opt,name=menu_id,json=menuId,proto3" json:"menu_id,omitempty"`
	BranchName string `protobuf:"bytes,2,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
}

func (x *MenuName) Reset() {
	*x = MenuName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_branch_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MenuName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuName) ProtoMessage() {}

func (x *MenuName) ProtoReflect() protoreflect.Message {
	mi := &file_branch_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuName.ProtoReflect.Descriptor instead.
func (*MenuName) Descriptor() ([]byte, []int) {
	return file_branch_service_proto_rawDescGZIP(), []int{13}
}

func (x *MenuName) GetMenuId() string {
	if x != nil {
		return x.MenuId
	}
	return ""
}

func (x *MenuName) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

var File_branch_service_proto protoreflect.FileDescriptor

var file_branch_service_proto_rawDesc = []byte{
	0x0a, 0x14, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0c, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2d, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x42, 0x79, 0x4a, 0x6f, 0x77, 0x69, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x6a, 0x6f, 0x77, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6a, 0x6f, 0x77, 0x69, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x42, 0x79, 0x49, 0x69, 0x6b, 0x6f, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x69, 0x6b, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x69, 0x6b, 0x6f, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x70,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x69,
	0x70, 0x70, 0x65, 0x72, 0x49, 0x64, 0x22, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x3d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x22, 0xd8, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x69, 0x70, 0x70,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x69, 0x6b, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x69, 0x69, 0x6b, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x6f, 0x77, 0x69,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6a, 0x6f, 0x77, 0x69, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x73, 0x22, 0x5c, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x68, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x4e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x69, 0x70, 0x70,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x61, 0x72, 0x65,
	0x73, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x22, 0x44,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x69, 0x70, 0x70,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x68,
	0x69, 0x70, 0x70, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x65, 0x6e, 0x75, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x6e, 0x75, 0x49, 0x64, 0x73, 0x22, 0x49, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x30, 0x0a, 0x09, 0x6d, 0x65, 0x6e, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65,
	0x6e, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x6e, 0x75, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x22, 0x44, 0x0a, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x65, 0x6e, 0x75, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x83, 0x07, 0x0a, 0x0d, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x1a, 0x12, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x03, 0x47,
	0x65, 0x74, 0x12, 0x12, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x1a, 0x10, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x2e, 0x67, 0x65, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x1a, 0x10,
	0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x22, 0x00, 0x12, 0x4d, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x1f, 0x2e, 0x67,
	0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x34, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x67, 0x65,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x1d, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x4e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x21,
	0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x61,
	0x72, 0x65, 0x73, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x4e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x42, 0x79, 0x4a, 0x6f, 0x77, 0x69, 0x49, 0x44, 0x12, 0x1c, 0x2e, 0x67, 0x65, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x4a, 0x6f, 0x77, 0x69, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x42, 0x79, 0x49, 0x69, 0x6b, 0x6f, 0x49, 0x44, 0x12, 0x1c, 0x2e, 0x67, 0x65, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x69, 0x6b, 0x6f, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x26,
	0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x53, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0f, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x46, 0x61, 0x72, 0x65, 0x49, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x13, 0x2e,
	0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x1a, 0x13, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61,
	0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x2e, 0x67, 0x65, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x65, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x17, 0x5a,
	0x15, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_branch_service_proto_rawDescOnce sync.Once
	file_branch_service_proto_rawDescData = file_branch_service_proto_rawDesc
)

func file_branch_service_proto_rawDescGZIP() []byte {
	file_branch_service_proto_rawDescOnce.Do(func() {
		file_branch_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_branch_service_proto_rawDescData)
	})
	return file_branch_service_proto_rawDescData
}

var file_branch_service_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_branch_service_proto_goTypes = []interface{}{
	(*GetByJowiIDRequest)(nil),           // 0: genproto.GetByJowiIDRequest
	(*GetByIikoIDRequest)(nil),           // 1: genproto.GetByIikoIDRequest
	(*GetBranchByNameRequest)(nil),       // 2: genproto.GetBranchByNameRequest
	(*BranchId)(nil),                     // 3: genproto.BranchId
	(*GetBranchResponse)(nil),            // 4: genproto.GetBranchResponse
	(*GetAllBranchesRequest)(nil),        // 5: genproto.GetAllBranchesRequest
	(*GetAllBranchesResponse)(nil),       // 6: genproto.GetAllBranchesResponse
	(*GetNearestBranchRequest)(nil),      // 7: genproto.GetNearestBranchRequest
	(*GetNearestBranchResponse)(nil),     // 8: genproto.GetNearestBranchResponse
	(*DeleteBranchRequest)(nil),          // 9: genproto.DeleteBranchRequest
	(*GetAllShipperBranchesRequest)(nil), // 10: genproto.GetAllShipperBranchesRequest
	(*GetBranchNameRequest)(nil),         // 11: genproto.GetBranchNameRequest
	(*GetBranchNameResponse)(nil),        // 12: genproto.GetBranchNameResponse
	(*MenuName)(nil),                     // 13: genproto.menuName
	(*Branch)(nil),                       // 14: genproto.Branch
	(*Location)(nil),                     // 15: genproto.Location
	(*FareCount)(nil),                    // 16: genproto.FareCount
	(*empty.Empty)(nil),                  // 17: google.protobuf.Empty
}
var file_branch_service_proto_depIdxs = []int32{
	14, // 0: genproto.GetBranchResponse.branch:type_name -> genproto.Branch
	14, // 1: genproto.GetAllBranchesResponse.branches:type_name -> genproto.Branch
	15, // 2: genproto.GetNearestBranchRequest.location:type_name -> genproto.Location
	14, // 3: genproto.GetNearestBranchResponse.branches:type_name -> genproto.Branch
	13, // 4: genproto.GetBranchNameResponse.menuNames:type_name -> genproto.menuName
	14, // 5: genproto.BranchService.Create:input_type -> genproto.Branch
	3,  // 6: genproto.BranchService.Get:input_type -> genproto.BranchId
	3,  // 7: genproto.BranchService.GetForReport:input_type -> genproto.BranchId
	5,  // 8: genproto.BranchService.GetAll:input_type -> genproto.GetAllBranchesRequest
	14, // 9: genproto.BranchService.Update:input_type -> genproto.Branch
	9,  // 10: genproto.BranchService.Delete:input_type -> genproto.DeleteBranchRequest
	7,  // 11: genproto.BranchService.GetNearestBranch:input_type -> genproto.GetNearestBranchRequest
	2,  // 12: genproto.BranchService.GetByName:input_type -> genproto.GetBranchByNameRequest
	0,  // 13: genproto.BranchService.GetByJowiID:input_type -> genproto.GetByJowiIDRequest
	1,  // 14: genproto.BranchService.GetByIikoID:input_type -> genproto.GetByIikoIDRequest
	10, // 15: genproto.BranchService.GetAllBranches:input_type -> genproto.GetAllShipperBranchesRequest
	16, // 16: genproto.BranchService.CheckFareIsUsed:input_type -> genproto.FareCount
	11, // 17: genproto.BranchService.GetBranchName:input_type -> genproto.GetBranchNameRequest
	3,  // 18: genproto.BranchService.Create:output_type -> genproto.BranchId
	14, // 19: genproto.BranchService.Get:output_type -> genproto.Branch
	14, // 20: genproto.BranchService.GetForReport:output_type -> genproto.Branch
	6,  // 21: genproto.BranchService.GetAll:output_type -> genproto.GetAllBranchesResponse
	17, // 22: genproto.BranchService.Update:output_type -> google.protobuf.Empty
	17, // 23: genproto.BranchService.Delete:output_type -> google.protobuf.Empty
	8,  // 24: genproto.BranchService.GetNearestBranch:output_type -> genproto.GetNearestBranchResponse
	14, // 25: genproto.BranchService.GetByName:output_type -> genproto.Branch
	14, // 26: genproto.BranchService.GetByJowiID:output_type -> genproto.Branch
	14, // 27: genproto.BranchService.GetByIikoID:output_type -> genproto.Branch
	6,  // 28: genproto.BranchService.GetAllBranches:output_type -> genproto.GetAllBranchesResponse
	16, // 29: genproto.BranchService.CheckFareIsUsed:output_type -> genproto.FareCount
	12, // 30: genproto.BranchService.GetBranchName:output_type -> genproto.GetBranchNameResponse
	18, // [18:31] is the sub-list for method output_type
	5,  // [5:18] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_branch_service_proto_init() }
func file_branch_service_proto_init() {
	if File_branch_service_proto != nil {
		return
	}
	file_branch_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_branch_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByJowiIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByIikoIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBranchByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBranchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllBranchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllBranchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNearestBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNearestBranchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllShipperBranchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBranchNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBranchNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_branch_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MenuName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_branch_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_branch_service_proto_goTypes,
		DependencyIndexes: file_branch_service_proto_depIdxs,
		MessageInfos:      file_branch_service_proto_msgTypes,
	}.Build()
	File_branch_service_proto = out.File
	file_branch_service_proto_rawDesc = nil
	file_branch_service_proto_goTypes = nil
	file_branch_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BranchServiceClient is the client API for BranchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BranchServiceClient interface {
	Create(ctx context.Context, in *Branch, opts ...grpc.CallOption) (*BranchId, error)
	Get(ctx context.Context, in *BranchId, opts ...grpc.CallOption) (*Branch, error)
	GetForReport(ctx context.Context, in *BranchId, opts ...grpc.CallOption) (*Branch, error)
	GetAll(ctx context.Context, in *GetAllBranchesRequest, opts ...grpc.CallOption) (*GetAllBranchesResponse, error)
	Update(ctx context.Context, in *Branch, opts ...grpc.CallOption) (*empty.Empty, error)
	Delete(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetNearestBranch(ctx context.Context, in *GetNearestBranchRequest, opts ...grpc.CallOption) (*GetNearestBranchResponse, error)
	GetByName(ctx context.Context, in *GetBranchByNameRequest, opts ...grpc.CallOption) (*Branch, error)
	GetByJowiID(ctx context.Context, in *GetByJowiIDRequest, opts ...grpc.CallOption) (*Branch, error)
	GetByIikoID(ctx context.Context, in *GetByIikoIDRequest, opts ...grpc.CallOption) (*Branch, error)
	GetAllBranches(ctx context.Context, in *GetAllShipperBranchesRequest, opts ...grpc.CallOption) (*GetAllBranchesResponse, error)
	CheckFareIsUsed(ctx context.Context, in *FareCount, opts ...grpc.CallOption) (*FareCount, error)
	GetBranchName(ctx context.Context, in *GetBranchNameRequest, opts ...grpc.CallOption) (*GetBranchNameResponse, error)
}

type branchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBranchServiceClient(cc grpc.ClientConnInterface) BranchServiceClient {
	return &branchServiceClient{cc}
}

func (c *branchServiceClient) Create(ctx context.Context, in *Branch, opts ...grpc.CallOption) (*BranchId, error) {
	out := new(BranchId)
	err := c.cc.Invoke(ctx, "/genproto.BranchService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchServiceClient) Get(ctx context.Context, in *BranchId, opts ...grpc.CallOption) (*Branch, error) {
	out := new(Branch)
	err := c.cc.Invoke(ctx, "/genproto.BranchService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchServiceClient) GetForReport(ctx context.Context, in *BranchId, opts ...grpc.CallOption) (*Branch, error) {
	out := new(Branch)
	err := c.cc.Invoke(ctx, "/genproto.BranchService/GetForReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchServiceClient) GetAll(ctx context.Context, in *GetAllBranchesRequest, opts ...grpc.CallOption) (*GetAllBranchesResponse, error) {
	out := new(GetAllBranchesResponse)
	err := c.cc.Invoke(ctx, "/genproto.BranchService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchServiceClient) Update(ctx context.Context, in *Branch, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.BranchService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchServiceClient) Delete(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.BranchService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchServiceClient) GetNearestBranch(ctx context.Context, in *GetNearestBranchRequest, opts ...grpc.CallOption) (*GetNearestBranchResponse, error) {
	out := new(GetNearestBranchResponse)
	err := c.cc.Invoke(ctx, "/genproto.BranchService/GetNearestBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchServiceClient) GetByName(ctx context.Context, in *GetBranchByNameRequest, opts ...grpc.CallOption) (*Branch, error) {
	out := new(Branch)
	err := c.cc.Invoke(ctx, "/genproto.BranchService/GetByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchServiceClient) GetByJowiID(ctx context.Context, in *GetByJowiIDRequest, opts ...grpc.CallOption) (*Branch, error) {
	out := new(Branch)
	err := c.cc.Invoke(ctx, "/genproto.BranchService/GetByJowiID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchServiceClient) GetByIikoID(ctx context.Context, in *GetByIikoIDRequest, opts ...grpc.CallOption) (*Branch, error) {
	out := new(Branch)
	err := c.cc.Invoke(ctx, "/genproto.BranchService/GetByIikoID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchServiceClient) GetAllBranches(ctx context.Context, in *GetAllShipperBranchesRequest, opts ...grpc.CallOption) (*GetAllBranchesResponse, error) {
	out := new(GetAllBranchesResponse)
	err := c.cc.Invoke(ctx, "/genproto.BranchService/GetAllBranches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchServiceClient) CheckFareIsUsed(ctx context.Context, in *FareCount, opts ...grpc.CallOption) (*FareCount, error) {
	out := new(FareCount)
	err := c.cc.Invoke(ctx, "/genproto.BranchService/CheckFareIsUsed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchServiceClient) GetBranchName(ctx context.Context, in *GetBranchNameRequest, opts ...grpc.CallOption) (*GetBranchNameResponse, error) {
	out := new(GetBranchNameResponse)
	err := c.cc.Invoke(ctx, "/genproto.BranchService/GetBranchName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BranchServiceServer is the server API for BranchService service.
type BranchServiceServer interface {
	Create(context.Context, *Branch) (*BranchId, error)
	Get(context.Context, *BranchId) (*Branch, error)
	GetForReport(context.Context, *BranchId) (*Branch, error)
	GetAll(context.Context, *GetAllBranchesRequest) (*GetAllBranchesResponse, error)
	Update(context.Context, *Branch) (*empty.Empty, error)
	Delete(context.Context, *DeleteBranchRequest) (*empty.Empty, error)
	GetNearestBranch(context.Context, *GetNearestBranchRequest) (*GetNearestBranchResponse, error)
	GetByName(context.Context, *GetBranchByNameRequest) (*Branch, error)
	GetByJowiID(context.Context, *GetByJowiIDRequest) (*Branch, error)
	GetByIikoID(context.Context, *GetByIikoIDRequest) (*Branch, error)
	GetAllBranches(context.Context, *GetAllShipperBranchesRequest) (*GetAllBranchesResponse, error)
	CheckFareIsUsed(context.Context, *FareCount) (*FareCount, error)
	GetBranchName(context.Context, *GetBranchNameRequest) (*GetBranchNameResponse, error)
}

// UnimplementedBranchServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBranchServiceServer struct {
}

func (*UnimplementedBranchServiceServer) Create(context.Context, *Branch) (*BranchId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedBranchServiceServer) Get(context.Context, *BranchId) (*Branch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedBranchServiceServer) GetForReport(context.Context, *BranchId) (*Branch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForReport not implemented")
}
func (*UnimplementedBranchServiceServer) GetAll(context.Context, *GetAllBranchesRequest) (*GetAllBranchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedBranchServiceServer) Update(context.Context, *Branch) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedBranchServiceServer) Delete(context.Context, *DeleteBranchRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedBranchServiceServer) GetNearestBranch(context.Context, *GetNearestBranchRequest) (*GetNearestBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNearestBranch not implemented")
}
func (*UnimplementedBranchServiceServer) GetByName(context.Context, *GetBranchByNameRequest) (*Branch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByName not implemented")
}
func (*UnimplementedBranchServiceServer) GetByJowiID(context.Context, *GetByJowiIDRequest) (*Branch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByJowiID not implemented")
}
func (*UnimplementedBranchServiceServer) GetByIikoID(context.Context, *GetByIikoIDRequest) (*Branch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIikoID not implemented")
}
func (*UnimplementedBranchServiceServer) GetAllBranches(context.Context, *GetAllShipperBranchesRequest) (*GetAllBranchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBranches not implemented")
}
func (*UnimplementedBranchServiceServer) CheckFareIsUsed(context.Context, *FareCount) (*FareCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckFareIsUsed not implemented")
}
func (*UnimplementedBranchServiceServer) GetBranchName(context.Context, *GetBranchNameRequest) (*GetBranchNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranchName not implemented")
}

func RegisterBranchServiceServer(s *grpc.Server, srv BranchServiceServer) {
	s.RegisterService(&_BranchService_serviceDesc, srv)
}

func _BranchService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Branch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.BranchService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServiceServer).Create(ctx, req.(*Branch))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BranchId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.BranchService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServiceServer).Get(ctx, req.(*BranchId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchService_GetForReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BranchId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServiceServer).GetForReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.BranchService/GetForReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServiceServer).GetForReport(ctx, req.(*BranchId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllBranchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.BranchService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServiceServer).GetAll(ctx, req.(*GetAllBranchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Branch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.BranchService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServiceServer).Update(ctx, req.(*Branch))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.BranchService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServiceServer).Delete(ctx, req.(*DeleteBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchService_GetNearestBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNearestBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServiceServer).GetNearestBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.BranchService/GetNearestBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServiceServer).GetNearestBranch(ctx, req.(*GetNearestBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchService_GetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServiceServer).GetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.BranchService/GetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServiceServer).GetByName(ctx, req.(*GetBranchByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchService_GetByJowiID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByJowiIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServiceServer).GetByJowiID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.BranchService/GetByJowiID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServiceServer).GetByJowiID(ctx, req.(*GetByJowiIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchService_GetByIikoID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIikoIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServiceServer).GetByIikoID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.BranchService/GetByIikoID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServiceServer).GetByIikoID(ctx, req.(*GetByIikoIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchService_GetAllBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllShipperBranchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServiceServer).GetAllBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.BranchService/GetAllBranches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServiceServer).GetAllBranches(ctx, req.(*GetAllShipperBranchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchService_CheckFareIsUsed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FareCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServiceServer).CheckFareIsUsed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.BranchService/CheckFareIsUsed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServiceServer).CheckFareIsUsed(ctx, req.(*FareCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchService_GetBranchName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServiceServer).GetBranchName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.BranchService/GetBranchName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServiceServer).GetBranchName(ctx, req.(*GetBranchNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BranchService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "genproto.BranchService",
	HandlerType: (*BranchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BranchService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _BranchService_Get_Handler,
		},
		{
			MethodName: "GetForReport",
			Handler:    _BranchService_GetForReport_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _BranchService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BranchService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BranchService_Delete_Handler,
		},
		{
			MethodName: "GetNearestBranch",
			Handler:    _BranchService_GetNearestBranch_Handler,
		},
		{
			MethodName: "GetByName",
			Handler:    _BranchService_GetByName_Handler,
		},
		{
			MethodName: "GetByJowiID",
			Handler:    _BranchService_GetByJowiID_Handler,
		},
		{
			MethodName: "GetByIikoID",
			Handler:    _BranchService_GetByIikoID_Handler,
		},
		{
			MethodName: "GetAllBranches",
			Handler:    _BranchService_GetAllBranches_Handler,
		},
		{
			MethodName: "CheckFareIsUsed",
			Handler:    _BranchService_CheckFareIsUsed_Handler,
		},
		{
			MethodName: "GetBranchName",
			Handler:    _BranchService_GetBranchName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "branch_service.proto",
}
